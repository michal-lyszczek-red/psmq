/* ==========================================================================
    Licensed under BSD 2clause license See LICENSE file for more information
    Author: Michał Łyszczek <michal.lyszczek@bofc.pl>
   ========================================================================== */

#ifndef PSMQ_H
#define PSMQ_H 1

#include <mqueue.h>

#define PSMQ_CTRL_CMD_OPEN        'o'
#define PSMQ_CTRL_CMD_CLOSE       'c'
#define PSMQ_CTRL_CMD_SUBSCRIBE   's'
#define PSMQ_CTRL_CMD_UNSUBSCRIBE 'u'
#define PSMQ_CTRL_CMD_PUBLISH     'p'
#define PSMQ_CTRL_CMD_IOCTL       'i'

enum PSMQ_IOCTL
{
	PSMQ_IOCTL_INVALID = 0,
	PSMQ_IOCTL_REPLY_TIMEOUT,
	PSMQ_IOCTL_MAX
};

#ifndef PSMQ_MSG_MAX
#define PSMQ_MSG_MAX (@PSMQ_MSG_MAX@)
#endif

#define PSMQ_TOPIC(p) ((p).data)
#define PSMQ_PAYLOAD(p) ((void *)((p).data + strlen((p).data) + 1))

/* struct used to hold state for single psmq client */
struct psmq
{
	/* queue used to receive data from the broker,
	 * it is used to receive both published message
	 * user subscribed too, as well as control
	 * messages */
	mqd_t  qsub;

	/* queue used to send messages to the broker,
	 * it is used to publish both standard message
	 * for other subscribed clients as well as
	 * control messages like subscribe */
	mqd_t  qpub;

	/* unique file descriptor used when communicating
	 * with broker, needed so that broker can id us */
	unsigned char  fd;
};

/* broker and clients both use this structure to communicate with
 * each other. psmqd will create single mqueue with size of this
 * structure and one for each connected client, so it's worth keeping
 * it as small as possible. */
struct psmq_msg
{
	/* control messages are stored in this buffer */
	struct ctrl
	{
		/* defines request command */
		char  cmd;

		/* during requst from the client, this holds file
		 * descriptor of a client, an id to identify which client
		 * is performing request
		 *
		 * during reply from the broker it holds request result
		 * (0 for success or errno when error occured) */
		unsigned char  data;
	} ctrl;

	/* length of payload data in msg, this contains only length of
	 * data without topic. */
	unsigned short  paylen;

	/* data contains both topic and payload. Topic must always be
	 * null-terminated after which payload follows. This allows
	 * for some flexibility, ie if PSMQ_MSG_MAX was be 10, then
	 * topic could be 3 bytes long and payload 7, but also
	 * topic could take 9 bytes and payload only 1.
	 *
	 * Minium value of PSMQ_MSG_MAX that makes sense is 4,
	 * 2 characters for topic (which always starts with '/'),
	 * null terminator for topic, and one byte of data. You
	 * could live with 3 bytes, but that would make psmq to
	 * be able to only send topics without any payload.
	 *
	 * timeout ioctl needs 3 bytes of data, thus increasing
	 * minimum value of PSMQ_MSG_MAX to 6. You still manually
	 * se this to lower value like 3, but you would get
	 * errors and hangs when calling timeout ioctl, so it's
	 * not recommended nor supported. */
	char  data[PSMQ_MSG_MAX];
};



int psmq_init(struct psmq *psmq, const char *brokername, const char *mqname,
		int maxmsg);
int psmq_cleanup(struct psmq *psmq);
int psmq_subscribe(struct psmq *psmq, const char *topic);
int psmq_unsubscribe(struct psmq *psmq, const char *topic);
int psmq_publish(struct psmq *psmq, const char *topic, const void *payload,
		size_t paylen, unsigned int prio);

int psmq_receive(struct psmq *psmq, struct psmq_msg *msg, unsigned *prio);
int psmq_timedreceive(struct psmq *psmq, struct psmq_msg *msg,
		unsigned *prio, struct timespec *tp);
int psmq_timedreceive_ms(struct psmq *psmq, struct psmq_msg *msg,
		unsigned *prio, size_t ms);

int psmq_ioctl(struct psmq *psmq, int req, ...);
int psmq_ioctl_reply_timeout(struct psmq *psmq, unsigned short val);

#endif /* PSMQ_H */
